{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Skaha","text":"<p>A lightweight pythonic interface to the CANFAR Science Platform.</p> <p>Example</p> <pre><code>from skaha.session import Session\n\nsession = Session()\nsession_id = session.create(\n    name=\"test\",\n    image=\"images.canfar.net/chimefrb/alpine:keep\",\n    cores=2,\n    ram=8,\n    kind=\"headless\",\n    cmd=\"env\",\n    env={\"TEST\": \"test\"},\n    replicas=3,\n)\n</code></pre> <p>Get Started Go to GitHub </p>"},{"location":"client/","title":"Client","text":""},{"location":"client/#skaha.client.SkahaClient","title":"<code>skaha.client.SkahaClient</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>SkahaClient is the base class for all other API clients.</p> <p>Parameters:</p> Name Type Description Default <code>server</code> <code>str</code> <p>Server URL.</p> required <code>version</code> <code>str</code> <p>Skaha API version.</p> required <code>certificate</code> <code>str</code> <p>Certificate file.</p> required <code>timeout</code> <code>int</code> <p>Timeout for requests.</p> required <p>Raises:</p> Type Description <code>InvalidServerURL</code> <p>If the server URL is invalid.</p> <code>InvalidCertificateError</code> <p>If the client is given an invalid certificate.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.client import SkahaClient\n    class MyClient(SkahaClient):\n        pass\n</code></pre> Source code in <code>skaha/client.py</code> <pre><code>class SkahaClient(BaseModel):\n\"\"\"SkahaClient is the base class for all other API clients.\n\n    Args:\n        server (str): Server URL.\n        version (str): Skaha API version.\n        certificate (str): Certificate file.\n        timeout (int): Timeout for requests.\n\n    Raises:\n        InvalidServerURL: If the server URL is invalid.\n        InvalidCertificateError: If the client is given an invalid certificate.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.client import SkahaClient\n            class MyClient(SkahaClient):\n                pass\n\n    \"\"\"\n\n    server: AnyHttpUrl = Field(\n        default=\"https://ws-uv.canfar.net/skaha\", title=\"Server URL\", type=AnyHttpUrl\n    )\n    version: str = Field(default=\"v0\", title=\"Skaha API Version\")\n    certificate: FilePath = Field(\n        default=\"{HOME}/.ssl/cadcproxy.pem\".format(HOME=environ[\"HOME\"]),\n        type=str,\n        title=\"Certificate File\",\n    )\n    timeout: int = Field(default=15, title=\"Timeout\")\n    session: Type[Session] = Field(default=Session())\n    cert: str = Field(default=\"\")\n    verify: bool = Field(default=True)\n\n    @validator(\"server\", pre=True, always=True)\n    def server_has_valid_url(cls, value: str):\n\"\"\"Check if server is a valid url.\"\"\"\n        try:\n            value = parse_obj_as(AnyHttpUrl, value)\n        except ValidationError as error:\n            log.error(error)\n            raise InvalidServerURL(\"invalid server url\")\n        return value\n\n    @validator(\"certificate\", pre=True, always=True)\n    def certificate_exists_and_is_readable(cls, value: str):\n\"\"\"Check the certificate.\"\"\"\n        try:\n            value = parse_obj_as(FilePath, value)  # type: ignore\n        except ValidationError as error:\n            log.error(error)\n            raise InvalidCertificateError(\n                \"certificate needs to be absolute path and readable\"\n            )\n        return value\n\n    @root_validator(skip_on_failure=True)\n    def session_set_headers(cls, values: Dict[str, Any]):\n\"\"\"Set headers to session object after all values has been obtained.\"\"\"\n        values[\"session\"].headers.update({\"X-Skaha-Server\": str(values[\"server\"])})\n        values[\"session\"].headers.update(\n            {\"Content-Type\": \"application/x-www-form-urlencoded\"}\n        )\n        values[\"session\"].headers.update({\"Accept\": \"*/*\"})\n        values[\"session\"].headers.update({\"User-Agent\": \"skaha-client\"})\n        values[\"session\"].headers.update({\"Date\": asctime(gmtime())})\n        values[\"session\"].headers.update({\"X-Skaha-Version\": __version__})\n        values[\"session\"].headers.update(\n            {\"X-Skaha-Client-Python-Version\": python_version()}\n        )\n        values[\"session\"].headers.update({\"X-Skaha-Client-Arch\": machine()})\n        values[\"session\"].headers.update({\"X-Skaha-Client-OS\": system()})\n        values[\"session\"].headers.update({\"X-Skaha-Client-OS-Version\": release()})\n        values[\"session\"].headers.update({\"X-Skaha-Client-Platform\": platform()})\n        return values\n\n    @root_validator(skip_on_failure=True)\n    def assign_cert_values(cls, values: Dict[str, Any]):\n\"\"\"Check the certificate.\"\"\"\n        values[\"session\"].headers.update({\"X-Skaha-Authentication-Type\": \"certificate\"})\n        values[\"cert\"] = str(values[\"certificate\"])\n        values[\"verify\"] = True\n        values[\"session\"].cert = values[\"cert\"]\n        values[\"session\"].verify = values[\"verify\"]\n        return values\n</code></pre>"},{"location":"context/","title":"Context","text":""},{"location":"context/#skaha.context.Context","title":"<code>skaha.context.Context</code>","text":"<p>         Bases: <code>SkahaClient</code></p> <p>Get available resources from the skaha server.</p> Source code in <code>skaha/context.py</code> <pre><code>class Context(SkahaClient):\n\"\"\"Get available resources from the skaha server.\"\"\"\n\n    @root_validator\n    def set_server(cls, values: Dict[str, Any]):\n\"\"\"Sets the server path after validation.\"\"\"\n        values[\"server\"] = f\"{values['server']}/{values['version']}/context\"\n        return values\n\n    def resources(self) -&gt; Dict[str, Any]:\n\"\"\"Get available resources from the skaha server.\n\n        Returns:\n            A dictionary of available resources.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.context import Context\n            &gt;&gt;&gt; context = Context()\n            &gt;&gt;&gt; context.resources()\n            {'defaultCores': 2,\n             'defaultCoresHeadless': 1,\n             'availableCores': [1, 2, 4, 8, 16],\n             'defaultRAM': 16,\n             'defaultRAMHeadless': 4,\n             'availableRAM': [1, 2, 4, 8, 16, 32, 64, 128, 192],\n             'availableGPUs': [1,2,3,...],\n            }\n        \"\"\"\n        response: Response = self.session.get(url=self.server)  # type: ignore\n        response.raise_for_status()\n        return response.json()\n</code></pre>"},{"location":"context/#skaha.context.Context.resources","title":"<code>resources()</code>","text":"<p>Get available resources from the skaha server.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dictionary of available resources.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.context import Context\n&gt;&gt;&gt; context = Context()\n&gt;&gt;&gt; context.resources()\n{'defaultCores': 2,\n 'defaultCoresHeadless': 1,\n 'availableCores': [1, 2, 4, 8, 16],\n 'defaultRAM': 16,\n 'defaultRAMHeadless': 4,\n 'availableRAM': [1, 2, 4, 8, 16, 32, 64, 128, 192],\n 'availableGPUs': [1,2,3,...],\n}\n</code></pre> Source code in <code>skaha/context.py</code> <pre><code>def resources(self) -&gt; Dict[str, Any]:\n\"\"\"Get available resources from the skaha server.\n\n    Returns:\n        A dictionary of available resources.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.context import Context\n        &gt;&gt;&gt; context = Context()\n        &gt;&gt;&gt; context.resources()\n        {'defaultCores': 2,\n         'defaultCoresHeadless': 1,\n         'availableCores': [1, 2, 4, 8, 16],\n         'defaultRAM': 16,\n         'defaultRAMHeadless': 4,\n         'availableRAM': [1, 2, 4, 8, 16, 32, 64, 128, 192],\n         'availableGPUs': [1,2,3,...],\n        }\n    \"\"\"\n    response: Response = self.session.get(url=self.server)  # type: ignore\n    response.raise_for_status()\n    return response.json()\n</code></pre>"},{"location":"examples/","title":"Skaha Usage Examples","text":""},{"location":"examples/#session-api","title":"Session API","text":"<p>The bread and butter of Skaha is the Session API. This API allows you to create, destroy, and get information about your sessions on the Skaha platform.</p>"},{"location":"examples/#creating-a-session","title":"Creating a Session","text":"Create a session<pre><code>from skaha.session import Session\nsession = Session()\nsession_id = session.create(\n    name=\"test\",\n    image=\"images.canfar.net/chimefrb/testing:keep\",\n    cores=2,\n    ram=8,\n    kind=\"headless\",\n    cmd=\"env\",\n    env={\"TEST\": \"test\"},\n    replicas=3,\n)\n</code></pre> <p>This will create three headless containers, each with 2 cores and 8GB of RAM, and run the command <code>env</code> in each container. The environment variable <code>TEST</code> will be set to <code>test</code> in each container. The response will be a list of session IDs created.</p> <pre><code>print(session_id)\n[\"mrjdtbn9\", \"ov6doae7\", \"ayv4553m\"]\n</code></pre>"},{"location":"examples/#getting-session-information","title":"Getting Session Information","text":"Get session information<pre><code>session.info(session_id)\n</code></pre> <pre><code>[{'id': 'mrjdtbn9',\n  'userid': 'shinybrar',\n  'image': 'images.canfar.net/chimefrb/testing:keep',\n  'type': 'headless',\n  'status': 'Succeeded',\n  'name': 'test',\n  'startTime': '2022-12-15T18:59:12Z',\n  'connectURL': 'not-applicable',\n  'requestedRAM': '8G',\n  'requestedCPUCores': '2',\n  'requestedGPUCores': '&lt;none&gt;',\n  'coresInUse': '&lt;none&gt;',\n  'ramInUse': '&lt;none&gt;'},\n  ...\n {'id': 'ayv4553m',\n  'userid': 'shinybrar',\n  'image': 'images.canfar.net/chimefrb/testing:keep',\n  'type': 'headless',\n  'status': 'Succeeded',\n  'name': 'test',\n  'startTime': '2022-12-15T18:59:13Z',\n  'connectURL': 'not-applicable',\n  'requestedRAM': '8G',\n  'requestedCPUCores': '2',\n  'requestedGPUCores': '&lt;none&gt;',\n  'coresInUse': '&lt;none&gt;',\n  'ramInUse': '&lt;none&gt;'}]\n</code></pre>"},{"location":"examples/#getting-session-logs","title":"Getting Session Logs","text":"<p>To get the logs of a session, you can use the <code>logs</code> method. The response will be a dictionary with the session IDs as keys and the logs as values. The logs are plain text format and can be printed to the console.</p> Get session logs<pre><code>session.logs(session_id)\n</code></pre>"},{"location":"examples/#destroying-a-session","title":"Destroying a Session","text":"<p>When you are done with your session, you can destroy it using the <code>destroy</code> method. The response will be a dictionary with the session IDs as keys and a boolean value indicating whether the session was destroyed or not.</p> Destroy a session<pre><code>session.destroy(session_id)\n</code></pre> <pre><code>{\"mrjdtbn9\": True, \"ov6doae7\": True, \"ayv4553m\": True}\n</code></pre>"},{"location":"examples/#image-api","title":"Image API","text":"<p>The Image API allows you to get information about the images available on the Skaha platform. Nominally, </p>"},{"location":"examples/#getting-image-information","title":"Getting Image Information","text":"Get image information<pre><code>from skaha.images import Images\nimages = Images()\nimages.fetch()\n</code></pre> <p>But most of the time, you are only interested in images of a particular type. For example, if you want to get all the images that are available for headless sessions, you can do the following:</p> Get headless image information<pre><code>images.fetch(kind=\"headless\")\n</code></pre> <pre><code>[\n    \"images.canfar.net/chimefrb/testing:keep\",\n    \"images.canfar.net/lsst/lsst_v19_0_0:0.1\",\n    \"images.canfar.net/skaha/lensfit:22.11\",\n    \"images.canfar.net/skaha/lensfit:22.10\",\n    \"images.canfar.net/skaha/lensingsim:22.07\",\n    \"images.canfar.net/skaha/phosim:5.6.11\",\n    \"images.canfar.net/skaha/terminal:1.1.2\",\n    \"images.canfar.net/skaha/terminal:1.1.1\",\n    \"images.canfar.net/uvickbos/pycharm:0.1\",\n    \"images.canfar.net/uvickbos/swarp:0.1\",\n    \"images.canfar.net/uvickbos/isis:2.2\",\n    \"images.canfar.net/uvickbos/find_moving:0.1\",\n]\n</code></pre>"},{"location":"examples/#context-api","title":"Context API","text":"<p>Context API allows the user to get information about the resources available on the Skaha platform.</p>"},{"location":"examples/#getting-reosources-information","title":"Getting Reosources Information","text":"Get context information<pre><code>from skaha.context import Context\ncontext = Context()\ncontext.resources()\n</code></pre> <pre><code>{\n    \"defaultCores\": 2,\n    \"defaultCoresHeadless\": 1,\n    \"availableCores\": [1, 2, 4, 8, 16],\n    \"defaultRAM\": 16,\n    \"defaultRAMHeadless\": 4,\n    \"availableRAM\": [1, 2, 4, 8, 16, 32, 64, 128, 192],\n    \"availableGPUs\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n        23,\n        24,\n        25,\n        26,\n        27,\n        28,\n    ],\n}\n</code></pre>"},{"location":"get-started/","title":"Get Started","text":""},{"location":"get-started/#installation-quick-start","title":"Installation (Quick Start)","text":"<p>Skaha requires Python 3.7 or higher.</p> <pre><code>pip install skaha\n</code></pre>"},{"location":"get-started/#before-you-start","title":"Before you start","text":"<p>Before you can use skaha, you need to have a valid CANFAR account and have access to the Skaha Science Platform. If you don't have a CANFAR account, you can register for one here. Once you have a CANFAR account, you can request access to the Skaha Science Platform from CANFAR Personel.</p>"},{"location":"get-started/#authentication","title":"Authentication","text":"<p>Skaha uses a X509 security certificate for interactions with the CANFAR Science Platform. You need to have a valid certificate in order to use skaha.</p>"},{"location":"get-started/#generating-a-certificate","title":"Generating a certificate","text":"<p>When you install skaha, a command line tool called <code>cadc-get-cert</code> is also installed. This tool can be used to generate a certificate for you. You can run the following command to generate a certificate:</p> Generate a certificate<pre><code>cadc-get-cert -u &lt;your-username&gt;\nPassword: &lt;your-password&gt;\n\nDONE. 10 day certificate saved in /home/&lt;your-username&gt;/.ssl/cadcproxy.pem\n</code></pre> <p>This will generate a certificate for you and store it in <code>~/.ssl/cadcproxy.pem</code>. </p> <p>By default, skaha will only look at the <code>$HOME/.ssl/cadcproxy.pem</code> location for your certificate.  If you want to use a different location, you can pass the path to the certificate to any Skaha Object when you create it.</p> Using a different certificate location<pre><code>from skaha.session import Session\n\nsession = Session(certificate=\"/path/to/certificate.pem\")\n</code></pre>"},{"location":"get-started/#contributing","title":"Contributing","text":"<p>We use poetry to manage our dependencies. To install poetry, run the following command:</p> Install poetry<pre><code>pip install poetry&gt;=1.2.2\n</code></pre> <p>Now you can get started to contribute to skaha:</p> Clone the repository and run tests<pre><code>git clone https://github.com/chimefrb/skaha.git\ncd skaha\npoetry install\npoetry run pytest\n</code></pre> <p>Note</p> <p>To run tests, you need a valid CANFAR security certificate and access to the Skaha Science Platform.</p>"},{"location":"get-started/#pre-commit","title":"Pre-commit","text":"<p>We have a configuration file for pre-commit that will run a series of checks on your code before you commit it. To install pre-commit, run the following command:</p> Install pre-commit<pre><code>poetry run pre-commit install\n</code></pre>"},{"location":"get-started/#licensing","title":"Licensing","text":"<p>This code is licensed under the MIT License. See the LICENSE file for more information.</p>"},{"location":"images/","title":"Images","text":""},{"location":"images/#skaha.images.Images","title":"<code>skaha.images.Images</code>","text":"<p>         Bases: <code>SkahaClient</code></p> <p>Skaha Image Management.</p> Source code in <code>skaha/images.py</code> <pre><code>class Images(SkahaClient):\n\"\"\"Skaha Image Management.\"\"\"\n\n    @root_validator\n    def set_server(cls, values: Dict[str, Any]):\n\"\"\"Sets the server path after validation.\"\"\"\n        values[\"server\"] = f\"{values['server']}/{values['version']}/image\"\n        values[\"server\"] = values[\"server\"] + \"/image\"\n        return values\n\n    def fetch(self, kind: Optional[str] = None) -&gt; List[str]:\n\"\"\"Get images from Skaha Server.\n\n        Args:\n            kind (Optional[str], optional): Type of image. Defaults to None.\n\n        Returns:\n            List[str]: A list of images on the skaha server.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.images import Images\n            &gt;&gt;&gt; images = Images()\n            &gt;&gt;&gt; images.fetch(kind=\"headless\")\n            ['images.canfar.net/chimefrb/sample:latest',\n             ...\n             'images.canfar.net/skaha/terminal:1.1.1']\n        \"\"\"\n        data: Dict[str, str] = {}\n        # If kind is not None, add it to the data dictionary\n        if kind:\n            data[\"type\"] = kind\n        response: Response = self.session.get(url=self.server, params=data)  # type: ignore # noqa\n        response.raise_for_status()\n        response = response.json()\n        reply: List[str] = []\n        for image in response:\n            reply.append(image[\"id\"])  # type: ignore\n        return reply\n</code></pre>"},{"location":"images/#skaha.images.Images.fetch","title":"<code>fetch(kind=None)</code>","text":"<p>Get images from Skaha Server.</p> <p>Parameters:</p> Name Type Description Default <code>kind</code> <code>Optional[str]</code> <p>Type of image. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: A list of images on the skaha server.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.images import Images\n&gt;&gt;&gt; images = Images()\n&gt;&gt;&gt; images.fetch(kind=\"headless\")\n['images.canfar.net/chimefrb/sample:latest',\n ...\n 'images.canfar.net/skaha/terminal:1.1.1']\n</code></pre> Source code in <code>skaha/images.py</code> <pre><code>def fetch(self, kind: Optional[str] = None) -&gt; List[str]:\n\"\"\"Get images from Skaha Server.\n\n    Args:\n        kind (Optional[str], optional): Type of image. Defaults to None.\n\n    Returns:\n        List[str]: A list of images on the skaha server.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.images import Images\n        &gt;&gt;&gt; images = Images()\n        &gt;&gt;&gt; images.fetch(kind=\"headless\")\n        ['images.canfar.net/chimefrb/sample:latest',\n         ...\n         'images.canfar.net/skaha/terminal:1.1.1']\n    \"\"\"\n    data: Dict[str, str] = {}\n    # If kind is not None, add it to the data dictionary\n    if kind:\n        data[\"type\"] = kind\n    response: Response = self.session.get(url=self.server, params=data)  # type: ignore # noqa\n    response.raise_for_status()\n    response = response.json()\n    reply: List[str] = []\n    for image in response:\n        reply.append(image[\"id\"])  # type: ignore\n    return reply\n</code></pre>"},{"location":"session/","title":"Session","text":""},{"location":"session/#skaha.session.Session","title":"<code>skaha.session.Session</code>","text":"<p>         Bases: <code>SkahaClient</code></p> <p>Skaha Session Client.</p> Source code in <code>skaha/session.py</code> <pre><code>class Session(SkahaClient):\n\"\"\"Skaha Session Client.\"\"\"\n\n    @root_validator\n    def set_server(cls, values: Dict[str, Any]):\n\"\"\"Sets the server path after validation.\"\"\"\n        values[\"server\"] = f\"{values['server']}/{values['version']}/session\"\n        log.debug(f'Server set to {values[\"server\"]}')\n        return values\n\n    def fetch(\n        self,\n        kind: Optional[str] = None,\n        status: Optional[str] = None,\n        view: Optional[str] = None,\n    ) -&gt; List[Dict[str, str]]:\n\"\"\"List open sessions for the user.\n\n        Args:\n            kind (str, optional): Session kind. Defaults to None.\n            status (str, optional): Session status. Defaults to None.\n            view (str, optional): Session view level. Defaults to None.\n\n        Notes:\n            By default, only the calling user's sessions are listed. If views is\n            set to 'all', all user sessions are listed (with limited information).\n\n        Returns:\n            list: Sessions information.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import Session\n            &gt;&gt;&gt; session = Session()\n            &gt;&gt;&gt; session.fetch(kind=\"notebook\")\n            [{'id': 'ikvp1jtp',\n              'userid': 'username',\n              'image': 'images.canfar.net/image/label:latest',\n              'type': 'notebook',\n              'status': 'Running',\n              'name': 'example-notebook',\n              'startTime': '2222-12-14T02:24:06Z',\n              'connectURL': 'https://skaha.example.com/ikvp1jtp',\n              'requestedRAM': '16G',\n              'requestedCPUCores': '2',\n              'requestedGPUCores': '&lt;none&gt;',\n              'coresInUse': '0m',\n              'ramInUse': '101Mi'}]\n            &gt;&gt;&gt; session.fetch(kind=\"desktop\", view=\"all\")\n            [{'userid': 'bmajor',\n              'type': 'desktop',\n              'status': 'Running',\n              'startTime': '2222-12-07T05:45:58Z'},\n              ...]\n        \"\"\"\n        specification: FetchSpec = FetchSpec(kind=kind, status=status, view=view)\n        parameters = specification.dict(exclude_none=True)\n        log.debug(parameters)\n        response: Response = self.session.get(url=self.server, params=parameters)  # type: ignore # noqa: E501\n        response.raise_for_status()\n        return response.json()\n\n    def stats(self) -&gt; Dict[str, Any]:\n\"\"\"Get statistics for the entire skaha cluster.\n\n        Returns:\n            Dict[str, Any]: Cluster statistics.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import Session\n            &gt;&gt;&gt; session = Session()\n            &gt;&gt;&gt; session.stats()\n            {'instances': {'session': 88, 'desktopApp': 30, 'headless': 0, 'total': 118},\n             'cores': {'requestedCPUCores': 377,\n             'coresAvailable': 960,\n             'maxCores': {'cores': 32, 'withRam': '147Gi'}},\n             'ram': {'maxRAM': {'ram': '226Gi', 'withCores': 32}}}\n        \"\"\"\n        parameters = {\"view\": \"stats\"}\n        log.debug(parameters)\n        response: Response = self.session.get(url=self.server, params=parameters)  # type: ignore # noqa: E501\n        response.raise_for_status()\n        return response.json()\n\n    def info(self, id: Union[List[str], str]) -&gt; List[Dict[str, Any]]:\n\"\"\"Get information about session[s].\n\n        Args:\n            id (Union[List[str], str]): Session ID[s].\n\n        Returns:\n            Dict[str, Any]: Session information.\n\n        Examples:\n            &gt;&gt;&gt; session.info(session_id=\"hjko98yghj\")\n            &gt;&gt;&gt; session.info(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n        \"\"\"\n        # Convert id to list if it is a string\n        if isinstance(id, str):\n            id = [id]\n        parameters: Dict[str, str] = {\"view\": \"event\"}\n        arguments: List[Any] = []\n        for value in id:\n            arguments.append({\"url\": self.server + \"/\" + value, \"params\": parameters})\n        loop = get_event_loop()\n        results = loop.run_until_complete(scale(self.session.get, arguments))\n        responses: List[Dict[str, Any]] = []\n        for response in results:\n            try:\n                response.raise_for_status()\n                responses.append(response.json())\n            except HTTPError as err:\n                log.error(err)\n        return responses\n\n    def logs(self, id: Union[List[str], str]) -&gt; Dict[str, str]:\n\"\"\"Get logs from a session[s].\n\n        Args:\n            id (Union[List[str], str]): Session ID[s].\n\n        Returns:\n            Dict[str, str]: Logs in text/plain format.\n\n        Examples:\n            &gt;&gt;&gt; session.logs(id=\"hjko98yghj\")\n            &gt;&gt;&gt; session.logs(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n        \"\"\"\n        if isinstance(id, str):\n            id = [id]\n        parameters: Dict[str, str] = {\"view\": \"logs\"}\n        arguments: List[Any] = []\n        for value in id:\n            arguments.append({\"url\": self.server + \"/\" + value, \"params\": parameters})\n        loop = get_event_loop()\n        results = loop.run_until_complete(scale(self.session.get, arguments))\n        responses: Dict[str, str] = {}\n        for index, identity in enumerate(id):\n            responses[identity] = \"\"\n            try:\n                results[index].raise_for_status()\n                responses[identity] = results[index].text\n            except HTTPError as err:\n                log.error(err)\n        return responses\n\n    def create(\n        self,\n        name: str,\n        image: str,\n        cores: int = 2,\n        ram: int = 4,\n        kind: str = \"headless\",\n        gpu: Optional[int] = None,\n        cmd: Optional[str] = None,\n        args: Optional[str] = None,\n        env: Dict[str, Any] = {},\n        replicas: int = 1,\n    ) -&gt; List[str]:\n\"\"\"Launch a skaha session.\n\n        Args:\n            name (str): A unique name for the session.\n            image (str): Container image to use for the session.\n            cores (int, optional): Number of cores. Defaults to 2.\n            ram (int, optional): Amount of RAM (GB). Defaults to 4.\n            kind (str, optional): Type of skaha session. Defaults to \"headless\".\n            cmd (Optional[str], optional): Command to run. Defaults to None.\n            args (Optional[str], optional): Arguments to the command. Defaults to None.\n            env (Optional[Dict[str, Any]], optional): Environment variables to inject.\n                Defaults to None.\n            replicas (int, optional): Number of sessions to launch. Defaults to 1.\n\n        Notes:\n            The name of the session suffixed with the replica number. eg. test-1, test-2\n            Each container will have the following environment variables injected:\n                * REPLICA_ID - The replica number\n                * REPLICA_COUNT - The total number of replicas\n\n        Returns:\n            List[str]: A list of session IDs for the launched sessions.\n\n        Examples:\n            &gt;&gt;&gt; session.create(\n                    name=\"test\",\n                    image='images.canfar.net/skaha/terminal:1.1.1',\n                    cores=2,\n                    ram=8,\n                    kind=\"headless\",\n                    cmd=\"env\",\n                    env={\"TEST\": \"test\"},\n                    replicas=2,\n                )\n            &gt;&gt;&gt; [\"hjko98yghj\", \"ikvp1jtp\"]\n        \"\"\"\n        specification: CreateSpec = CreateSpec(\n            name=name,\n            image=image,\n            cores=cores,\n            ram=ram,\n            kind=kind,\n            gpus=gpu,\n            cmd=cmd,\n            args=args,\n            env=env,\n            replicas=replicas,\n        )\n        data: Dict[str, Any] = specification.dict(exclude_none=True)\n        log.info(f\"Creating {replicas} session(s) with parameters:\")\n        log.info(data)\n        payload: List[Tuple[str, Any]] = []\n        arguments: List[Any] = []\n        for replica in range(replicas):\n            data[\"name\"] = name + \"-\" + str(replica + 1)\n            data[\"env\"].update({\"REPLICA_ID\": str(replica + 1)})\n            data[\"env\"].update({\"REPLICA_COUNT\": str(replicas)})\n            log.debug(f\"Replica Data: {data}\")\n            payload = convert.dict_to_tuples(data)\n            arguments.append({\"url\": self.server, \"params\": payload})\n        loop = get_event_loop()\n        results = loop.run_until_complete(scale(self.session.post, arguments))\n        responses: List[str] = []\n        for response in results:\n            try:\n                response.raise_for_status()\n                responses.append(response.text.rstrip(\"\\r\\n\"))\n            except HTTPError as err:\n                log.error(err)\n        return responses\n\n    def destroy(self, id: Union[str, List[str]]) -&gt; Dict[str, bool]:\n\"\"\"Destroy skaha session[s].\n\n        Args:\n            id (Union[str, List[str]]): Session ID[s].\n\n        Returns:\n            Dict[str, bool]: A dictionary of session IDs\n            and a bool indicating if the session was destroyed.\n\n        Examples:\n            &gt;&gt;&gt; session.destroy(id=\"hjko98yghj\")\n            &gt;&gt;&gt; session.destroy(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n        \"\"\"\n        if isinstance(id, str):\n            id = [id]\n        arguments: List[Any] = []\n        for value in id:\n            arguments.append({\"url\": self.server + \"/\" + value})\n        loop = get_event_loop()\n        results = loop.run_until_complete(scale(self.session.delete, arguments))\n        responses: Dict[str, bool] = {}\n        for index, identity in enumerate(id):\n            try:\n                results[index].raise_for_status()\n                responses[identity] = True\n            except HTTPError as err:\n                log.error(err)\n                responses[identity] = False\n        return responses\n</code></pre>"},{"location":"session/#skaha.session.Session.fetch","title":"<code>fetch(kind=None, status=None, view=None)</code>","text":"<p>List open sessions for the user.</p> <p>Parameters:</p> Name Type Description Default <code>kind</code> <code>str</code> <p>Session kind. Defaults to None.</p> <code>None</code> <code>status</code> <code>str</code> <p>Session status. Defaults to None.</p> <code>None</code> <code>view</code> <code>str</code> <p>Session view level. Defaults to None.</p> <code>None</code> Notes <p>By default, only the calling user's sessions are listed. If views is set to 'all', all user sessions are listed (with limited information).</p> <p>Returns:</p> Name Type Description <code>list</code> <code>List[Dict[str, str]]</code> <p>Sessions information.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import Session\n&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; session.fetch(kind=\"notebook\")\n[{'id': 'ikvp1jtp',\n  'userid': 'username',\n  'image': 'images.canfar.net/image/label:latest',\n  'type': 'notebook',\n  'status': 'Running',\n  'name': 'example-notebook',\n  'startTime': '2222-12-14T02:24:06Z',\n  'connectURL': 'https://skaha.example.com/ikvp1jtp',\n  'requestedRAM': '16G',\n  'requestedCPUCores': '2',\n  'requestedGPUCores': '&lt;none&gt;',\n  'coresInUse': '0m',\n  'ramInUse': '101Mi'}]\n&gt;&gt;&gt; session.fetch(kind=\"desktop\", view=\"all\")\n[{'userid': 'bmajor',\n  'type': 'desktop',\n  'status': 'Running',\n  'startTime': '2222-12-07T05:45:58Z'},\n  ...]\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>def fetch(\n    self,\n    kind: Optional[str] = None,\n    status: Optional[str] = None,\n    view: Optional[str] = None,\n) -&gt; List[Dict[str, str]]:\n\"\"\"List open sessions for the user.\n\n    Args:\n        kind (str, optional): Session kind. Defaults to None.\n        status (str, optional): Session status. Defaults to None.\n        view (str, optional): Session view level. Defaults to None.\n\n    Notes:\n        By default, only the calling user's sessions are listed. If views is\n        set to 'all', all user sessions are listed (with limited information).\n\n    Returns:\n        list: Sessions information.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import Session\n        &gt;&gt;&gt; session = Session()\n        &gt;&gt;&gt; session.fetch(kind=\"notebook\")\n        [{'id': 'ikvp1jtp',\n          'userid': 'username',\n          'image': 'images.canfar.net/image/label:latest',\n          'type': 'notebook',\n          'status': 'Running',\n          'name': 'example-notebook',\n          'startTime': '2222-12-14T02:24:06Z',\n          'connectURL': 'https://skaha.example.com/ikvp1jtp',\n          'requestedRAM': '16G',\n          'requestedCPUCores': '2',\n          'requestedGPUCores': '&lt;none&gt;',\n          'coresInUse': '0m',\n          'ramInUse': '101Mi'}]\n        &gt;&gt;&gt; session.fetch(kind=\"desktop\", view=\"all\")\n        [{'userid': 'bmajor',\n          'type': 'desktop',\n          'status': 'Running',\n          'startTime': '2222-12-07T05:45:58Z'},\n          ...]\n    \"\"\"\n    specification: FetchSpec = FetchSpec(kind=kind, status=status, view=view)\n    parameters = specification.dict(exclude_none=True)\n    log.debug(parameters)\n    response: Response = self.session.get(url=self.server, params=parameters)  # type: ignore # noqa: E501\n    response.raise_for_status()\n    return response.json()\n</code></pre>"},{"location":"session/#skaha.session.Session.create","title":"<code>create(name, image, cores=2, ram=4, kind='headless', gpu=None, cmd=None, args=None, env={}, replicas=1)</code>","text":"<p>Launch a skaha session.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A unique name for the session.</p> required <code>image</code> <code>str</code> <p>Container image to use for the session.</p> required <code>cores</code> <code>int</code> <p>Number of cores. Defaults to 2.</p> <code>2</code> <code>ram</code> <code>int</code> <p>Amount of RAM (GB). Defaults to 4.</p> <code>4</code> <code>kind</code> <code>str</code> <p>Type of skaha session. Defaults to \"headless\".</p> <code>'headless'</code> <code>cmd</code> <code>Optional[str]</code> <p>Command to run. Defaults to None.</p> <code>None</code> <code>args</code> <code>Optional[str]</code> <p>Arguments to the command. Defaults to None.</p> <code>None</code> <code>env</code> <code>Optional[Dict[str, Any]]</code> <p>Environment variables to inject. Defaults to None.</p> <code>{}</code> <code>replicas</code> <code>int</code> <p>Number of sessions to launch. Defaults to 1.</p> <code>1</code> Notes <p>The name of the session suffixed with the replica number. eg. test-1, test-2 Each container will have the following environment variables injected:     * REPLICA_ID - The replica number     * REPLICA_COUNT - The total number of replicas</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: A list of session IDs for the launched sessions.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; session.create(\n        name=\"test\",\n        image='images.canfar.net/skaha/terminal:1.1.1',\n        cores=2,\n        ram=8,\n        kind=\"headless\",\n        cmd=\"env\",\n        env={\"TEST\": \"test\"},\n        replicas=2,\n    )\n&gt;&gt;&gt; [\"hjko98yghj\", \"ikvp1jtp\"]\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>def create(\n    self,\n    name: str,\n    image: str,\n    cores: int = 2,\n    ram: int = 4,\n    kind: str = \"headless\",\n    gpu: Optional[int] = None,\n    cmd: Optional[str] = None,\n    args: Optional[str] = None,\n    env: Dict[str, Any] = {},\n    replicas: int = 1,\n) -&gt; List[str]:\n\"\"\"Launch a skaha session.\n\n    Args:\n        name (str): A unique name for the session.\n        image (str): Container image to use for the session.\n        cores (int, optional): Number of cores. Defaults to 2.\n        ram (int, optional): Amount of RAM (GB). Defaults to 4.\n        kind (str, optional): Type of skaha session. Defaults to \"headless\".\n        cmd (Optional[str], optional): Command to run. Defaults to None.\n        args (Optional[str], optional): Arguments to the command. Defaults to None.\n        env (Optional[Dict[str, Any]], optional): Environment variables to inject.\n            Defaults to None.\n        replicas (int, optional): Number of sessions to launch. Defaults to 1.\n\n    Notes:\n        The name of the session suffixed with the replica number. eg. test-1, test-2\n        Each container will have the following environment variables injected:\n            * REPLICA_ID - The replica number\n            * REPLICA_COUNT - The total number of replicas\n\n    Returns:\n        List[str]: A list of session IDs for the launched sessions.\n\n    Examples:\n        &gt;&gt;&gt; session.create(\n                name=\"test\",\n                image='images.canfar.net/skaha/terminal:1.1.1',\n                cores=2,\n                ram=8,\n                kind=\"headless\",\n                cmd=\"env\",\n                env={\"TEST\": \"test\"},\n                replicas=2,\n            )\n        &gt;&gt;&gt; [\"hjko98yghj\", \"ikvp1jtp\"]\n    \"\"\"\n    specification: CreateSpec = CreateSpec(\n        name=name,\n        image=image,\n        cores=cores,\n        ram=ram,\n        kind=kind,\n        gpus=gpu,\n        cmd=cmd,\n        args=args,\n        env=env,\n        replicas=replicas,\n    )\n    data: Dict[str, Any] = specification.dict(exclude_none=True)\n    log.info(f\"Creating {replicas} session(s) with parameters:\")\n    log.info(data)\n    payload: List[Tuple[str, Any]] = []\n    arguments: List[Any] = []\n    for replica in range(replicas):\n        data[\"name\"] = name + \"-\" + str(replica + 1)\n        data[\"env\"].update({\"REPLICA_ID\": str(replica + 1)})\n        data[\"env\"].update({\"REPLICA_COUNT\": str(replicas)})\n        log.debug(f\"Replica Data: {data}\")\n        payload = convert.dict_to_tuples(data)\n        arguments.append({\"url\": self.server, \"params\": payload})\n    loop = get_event_loop()\n    results = loop.run_until_complete(scale(self.session.post, arguments))\n    responses: List[str] = []\n    for response in results:\n        try:\n            response.raise_for_status()\n            responses.append(response.text.rstrip(\"\\r\\n\"))\n        except HTTPError as err:\n            log.error(err)\n    return responses\n</code></pre>"},{"location":"session/#skaha.session.Session.info","title":"<code>info(id)</code>","text":"<p>Get information about session[s].</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>Union[List[str], str]</code> <p>Session ID[s].</p> required <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>Dict[str, Any]: Session information.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; session.info(session_id=\"hjko98yghj\")\n&gt;&gt;&gt; session.info(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>def info(self, id: Union[List[str], str]) -&gt; List[Dict[str, Any]]:\n\"\"\"Get information about session[s].\n\n    Args:\n        id (Union[List[str], str]): Session ID[s].\n\n    Returns:\n        Dict[str, Any]: Session information.\n\n    Examples:\n        &gt;&gt;&gt; session.info(session_id=\"hjko98yghj\")\n        &gt;&gt;&gt; session.info(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n    \"\"\"\n    # Convert id to list if it is a string\n    if isinstance(id, str):\n        id = [id]\n    parameters: Dict[str, str] = {\"view\": \"event\"}\n    arguments: List[Any] = []\n    for value in id:\n        arguments.append({\"url\": self.server + \"/\" + value, \"params\": parameters})\n    loop = get_event_loop()\n    results = loop.run_until_complete(scale(self.session.get, arguments))\n    responses: List[Dict[str, Any]] = []\n    for response in results:\n        try:\n            response.raise_for_status()\n            responses.append(response.json())\n        except HTTPError as err:\n            log.error(err)\n    return responses\n</code></pre>"},{"location":"session/#skaha.session.Session.logs","title":"<code>logs(id)</code>","text":"<p>Get logs from a session[s].</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>Union[List[str], str]</code> <p>Session ID[s].</p> required <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>Dict[str, str]: Logs in text/plain format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; session.logs(id=\"hjko98yghj\")\n&gt;&gt;&gt; session.logs(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>def logs(self, id: Union[List[str], str]) -&gt; Dict[str, str]:\n\"\"\"Get logs from a session[s].\n\n    Args:\n        id (Union[List[str], str]): Session ID[s].\n\n    Returns:\n        Dict[str, str]: Logs in text/plain format.\n\n    Examples:\n        &gt;&gt;&gt; session.logs(id=\"hjko98yghj\")\n        &gt;&gt;&gt; session.logs(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n    \"\"\"\n    if isinstance(id, str):\n        id = [id]\n    parameters: Dict[str, str] = {\"view\": \"logs\"}\n    arguments: List[Any] = []\n    for value in id:\n        arguments.append({\"url\": self.server + \"/\" + value, \"params\": parameters})\n    loop = get_event_loop()\n    results = loop.run_until_complete(scale(self.session.get, arguments))\n    responses: Dict[str, str] = {}\n    for index, identity in enumerate(id):\n        responses[identity] = \"\"\n        try:\n            results[index].raise_for_status()\n            responses[identity] = results[index].text\n        except HTTPError as err:\n            log.error(err)\n    return responses\n</code></pre>"},{"location":"session/#skaha.session.Session.destroy","title":"<code>destroy(id)</code>","text":"<p>Destroy skaha session[s].</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>Union[str, List[str]]</code> <p>Session ID[s].</p> required <p>Returns:</p> Type Description <code>Dict[str, bool]</code> <p>Dict[str, bool]: A dictionary of session IDs</p> <code>Dict[str, bool]</code> <p>and a bool indicating if the session was destroyed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; session.destroy(id=\"hjko98yghj\")\n&gt;&gt;&gt; session.destroy(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>def destroy(self, id: Union[str, List[str]]) -&gt; Dict[str, bool]:\n\"\"\"Destroy skaha session[s].\n\n    Args:\n        id (Union[str, List[str]]): Session ID[s].\n\n    Returns:\n        Dict[str, bool]: A dictionary of session IDs\n        and a bool indicating if the session was destroyed.\n\n    Examples:\n        &gt;&gt;&gt; session.destroy(id=\"hjko98yghj\")\n        &gt;&gt;&gt; session.destroy(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n    \"\"\"\n    if isinstance(id, str):\n        id = [id]\n    arguments: List[Any] = []\n    for value in id:\n        arguments.append({\"url\": self.server + \"/\" + value})\n    loop = get_event_loop()\n    results = loop.run_until_complete(scale(self.session.delete, arguments))\n    responses: Dict[str, bool] = {}\n    for index, identity in enumerate(id):\n        try:\n            results[index].raise_for_status()\n            responses[identity] = True\n        except HTTPError as err:\n            log.error(err)\n            responses[identity] = False\n    return responses\n</code></pre>"}]}